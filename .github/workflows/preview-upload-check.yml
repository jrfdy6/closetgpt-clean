name: Preview Upload Health Check

on:
  workflow_dispatch:
    inputs:
      preview_url:
        description: "Override preview URL (optional)"
        required: false
        type: string
  pull_request:
  push:
    branches:
      - main

jobs:
  verify-upload:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: https://closetgptrenew-backend-production.up.railway.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure proxy route file exists in repo
        run: |
          test -f frontend/src/app/api/image/upload/route.ts || {
            echo "❌ Missing frontend/src/app/api/image/upload/route.ts in this commit";
            exit 1;
          }

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Resolve Vercel preview URL
        id: preview
        shell: bash
        env:
          INPUT_PREVIEW_URL: ${{ github.event.inputs.preview_url }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          set -euo pipefail
          if [[ -n "${INPUT_PREVIEW_URL:-}" ]]; then
            echo "preview_url=${INPUT_PREVIEW_URL}" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [[ -z "${VERCEL_TOKEN:-}" || -z "${VERCEL_PROJECT_ID:-}" ]]; then
            echo "::warning::VERCEL_TOKEN/VERCEL_PROJECT_ID not set; skipping preview URL resolution. You can provide preview_url via workflow_dispatch."
            exit 0
          fi
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "Resolving preview for branch=$BRANCH sha=$GITHUB_SHA"
          # Fetch latest READY preview deployments for this project
          DEPLOYS=$(curl -fsSL -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments?projectId=$VERCEL_PROJECT_ID&target=preview&limit=50")
          # Prefer commit SHA match, then branch match
          URL=$(echo "$DEPLOYS" | jq -r --arg sha "$GITHUB_SHA" '.deployments[] | select(.meta.githubCommitSha==$sha and .readyState=="READY") | .url' | head -n1)
          if [[ -z "$URL" || "$URL" == "null" ]]; then
            URL=$(echo "$DEPLOYS" | jq -r --arg ref "$BRANCH" '.deployments[] | select(.meta.githubCommitRef==$ref and .readyState=="READY") | .url' | head -n1)
          fi
          if [[ -z "$URL" || "$URL" == "null" ]]; then
            echo "::warning::Could not resolve a READY preview for this commit/branch. Provide preview_url manually or rerun after Vercel finishes."
            exit 0
          fi
          FULL_URL="https://$URL"
          echo "Resolved preview: $FULL_URL"
          echo "preview_url=$FULL_URL" >> "$GITHUB_OUTPUT"

      - name: Check preview proxy route exists
        if: steps.preview.outputs.preview_url != ''
        env:
          PREVIEW_URL: ${{ steps.preview.outputs.preview_url }}
        run: |
          set -euo pipefail
          echo "Checking $PREVIEW_URL/api/image/upload"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL/api/image/upload")
          if [[ "$CODE" == "404" ]]; then
            echo "❌ Preview missing /api/image/upload (404). Redeploy with the proxy route present."
            exit 1
          fi
          echo "✅ Preview route present (HTTP $CODE)"

      - name: Verify backend CORS preflight for this preview
        if: steps.preview.outputs.preview_url != ''
        env:
          PREVIEW_URL: ${{ steps.preview.outputs.preview_url }}
          BACKEND_URL: ${{ env.BACKEND_URL }}
        run: |
          set -euo pipefail
          ORIGIN="$PREVIEW_URL"
          echo "Testing preflight for origin: $ORIGIN"
          HEADERS=$(curl -s -i -X OPTIONS \
            -H "Origin: $ORIGIN" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Authorization, Content-Type" \
            "$BACKEND_URL/api/image/upload")
          echo "$HEADERS"
          echo "$HEADERS" | grep -qi "Access-Control-Allow-Origin: "$ORIGIN"" || {
            echo "❌ Backend CORS missing ACAO for $ORIGIN";
            exit 1;
          }
          echo "✅ Backend CORS echoes ACAO for preview origin"


